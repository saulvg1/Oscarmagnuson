<section class="drawer drawer--right" id="drawer-name" data-drawer-target>
  <div class="drawer__overlay" data-drawer-close tabindex="-1"></div>
  <div class="drawer__wrapper">
    <div class="drawer__header">
      <div class="drawer__title">
        account
      </div>
      <button class="drawer__close" data-drawer-close aria-label="Close Drawer"></button>
    </div>
    <div class="drawer__content">
      
      
      <div class="cstm-login-form section-x-padding py-theme max-w-lg mx-auto" x-data="BaselineLogin()" x-init="mounted()">
        <div :class="{'hidden': state !== 'login'}">
          {% form 'customer_login', data-login-focus: true, tabindex: '-1' %}
            <h1 class="font-heading text-2xl mb-2">{{ 'customer.login.title' | t }}</h1>

            {% if form.errors %}
              <div class="mt-4" tabindex="-1" data-login-error>{{ form.errors | default_errors }}</div>
            {% endif %}

            <label class="mt-4 block" for="CustomerEmail" class="label-hidden">
              {{ 'customer.login.email' | t }}
            </label>
            <input type="email"
                  name="customer[email]"
                  id="CustomerEmail"
                  class="w-full py-1 bg-transparent border-b-text border-current {% if form.errors contains 'email' %}border-theme-color{% endif %}"
                  spellcheck="false"
                  autocomplete="off"
                  autocapitalize="off"
                  {% unless form.errors %}autofocus{% endunless %}>

            {% if form.password_needed %}
              <label class="mt-4 block" for="CustomerPassword" class="label-hidden">
                {{ 'customer.login.password' | t }}
              </label>
              <input type="password"
                    name="customer[password]"
                    id="CustomerPassword"
                    class="w-full py-1 bg-transparent border-b-text border-current {% if form.errors contains 'password' %}border-theme-color{% endif %}">
            {% endif %}

            <div class="mt-4">
              <button type="submit" class="btn">{{ 'customer.login.sign_in' | t }}</button>
            </div>

            <div class="mt-8 md:flex md:justify-between">
              {%- assign text = 'layout.customer.create_account' | t -%}              
              <a href="#" class="cstm-register inline-block hover:text-primary-accent text-base items-center justify-center border-b-text border-primary-text hover:border-primary-accent pb-1">
                <span class="">Create account →</span>
              </a>

              {% if form.password_needed %}
                <button @click="state = 'recover'" type="button" class="mt-4 md:mt-0 md:ml-4 inline-block hover:text-primary-accent text-base items-center justify-center {% if settings.links_show_underline %}border-b-text border-primary-text hover:border-primary-accent pb-1{% endif %}" href="{{ link }}">
                  <span class="{% if settings.links_uppercase %}uppercase{% endif %}">{{ 'customer.login.forgot_password' | t }}{% if settings.links_show_arrow %}&nbsp;&rarr;{% endif %}</span>
                </button>
              {% endif %}
            </div>
          {% endform %}
        </div>

  	<div :class="{'hidden': state !== 'recover'}" x-cloak>
      <div data-login-focus tabindex="-1">
        <h2 class="font-heading text-2xl mb-2">{{ 'customer.recover_password.title' | t }}</h2>

        {% form 'recover_customer_password' %}
          {% if form.errors %}
            <div class="mt-4" tabindex="-1" data-login-error>{{ form.errors | default_errors }}</div>
          {% endif %}

          {% if form.posted_successfully? %}
            <p data-recover-success>{{ 'customer.recover_password.success' | t }}</p>
          {% else %}
            <p>{{ 'customer.recover_password.subtext' | t }}</p>
            <label for="RecoverEmail" class="mt-4 block">
              {{ 'customer.recover_password.email' | t }}
            </label>
            <input type="email"
                  class="w-full py-1 bg-transparent border-b-text border-current"
                  name="email"
                  id="RecoverEmail"
                  spellcheck="false"
                  autocomplete="off"
                  autocapitalize="off">
            <div class="mt-4">
              <input type="submit" class="btn" value="{{ 'customer.recover_password.submit' | t }}">

              <button type="button" @click="state = 'login'">
                {{ 'customer.recover_password.cancel' | t }}
              </button>
            </div>
          {% endif %}
        {% endform %}
      </div>
    </div>

    {% if shop.checkout.guest_login %}
      <div class="mt-8">
        <h2>{{ 'customer.login.guest_title' | t }}</h2>

        {% form 'guest_login' %}
          <input type="submit" class="btn" value="{{ 'customer.login.guest_continue' | t }}">
        {% endform %}
      </div>
    {% endif %}
  </div>
      
      
     <div class="register-drawer section-x-padding py-theme max-w-md mx-auto" x-data="BaselineLogin()" x-init="mounted()">
      <h1 class="font-heading text-2xl mb-2">{{ 'customer.register.title' | t }}</h1>

      {%- assign formId = 'RegisterForm' -%}
      {% form 'create_customer', id: formId %}

        {% render 'form-status', form: form, form_id: formId, section_color: 'primary' %}

        <label for="FirstName" class="block mt-4">
          {{ 'customer.register.first_name' | t }}
        </label>
        <input type="text"
          class="w-full py-1 bg-transparent border-b-text border-current"
          name="customer[first_name]"
          id="FirstName"
          {% unless form.errors %}autofocus{% endunless %}
          {% if form.first_name %}value="{{ form.first_name }}"{% endif %}>

        <label for="LastName" class="block mt-4">
          {{ 'customer.register.last_name' | t }}
        </label>
        <input type="text"
          class="w-full py-1 bg-transparent border-b-text border-current"
          name="customer[last_name]"
          id="LastName"
          {% if form.last_name %}value="{{ form.last_name }}"{% endif %}>

        <label for="Email" class="block mt-4">
          {{ 'customer.register.email' | t }}
        </label>
        <input type="email"
          name="customer[email]"
          id="Email"
          class="w-full py-1 bg-transparent border-b-text border-current {% if form.errors contains 'email' %}border-theme-color{% endif %}"
          value="{% if form.email %}{{ form.email }}{% endif %}"
          spellcheck="false"
          autocomplete="off"
          autocapitalize="off">

        <label for="CreatePassword" class="block mt-4">
          {{ 'customer.register.password' | t }}
        </label>
        <input type="password"
          class="w-full py-1 bg-transparent border-b-text border-current {% if form.errors contains 'password' %}border-theme-color{% endif %}"
          name="customer[password]"
          id="CreatePassword">

        <div class="mt-4">
          <input type="submit" value="{{ 'customer.register.submit' | t }}" class="button">
        </div>

        <div class="mt-8 md:flex md:justify-between">
          <a href="#" class="cstm-signin inline-block hover:text-primary-accent text-base items-center justify-center border-b-text border-primary-text hover:border-primary-accent pb-1">
            <span class="">Sign In →</span>
          </a>
        </div>
      {% endform %}
    </div>

      
      
    </div>
  </div>
</section>


{% schema %}
  {
    "name": "Section name",
    "settings": []
  }
{% endschema %}

{% stylesheet %}
.drawer {
  display: none;
}

.drawer__header {
  padding: 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ddd;
}
.drawer__close {
  margin: 0;
  padding: 0;
  border: none;
  background-color: transparent;
  cursor: pointer;
  background-image: url("data:image/svg+xml,%0A%3Csvg width='15px' height='16px' viewBox='0 0 15 16' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='2.-Menu' transform='translate(-15.000000, -13.000000)' stroke='%23000000'%3E%3Cg id='Group' transform='translate(15.000000, 13.521000)'%3E%3Cpath d='M0,0.479000129 L15,14.2971819' id='Path-3'%3E%3C/path%3E%3Cpath d='M0,14.7761821 L15,-1.24344979e-14' id='Path-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  width: 15px;
  height: 15px;
}
.drawer__wrapper {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  max-width: 500px;
  z-index: 9999;
  overflow: auto;
  transition: transform 0.3s;
  will-change: transform;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  -webkit-transform: translateX(103%);
  transform: translateX(103%); /* extra 3% because of box-shadow */
  -webkit-overflow-scrolling: touch; /* enables momentum scrolling in iOS overflow elements */
  box-shadow: 0 2px 6px #777;
}
.drawer__content {
  position: relative;
  overflow-x: hidden;
  overflow-y: auto;
  height: 100%;
  flex-grow: 1;
  padding: 1.5rem;
}
.drawer.is-active {
  display: block;
}
.drawer.is-visible .drawer__wrapper {
  -webkit-transform: translateX(0);
  transform: translateX(0);
}
.drawer.is-visible .drawer__overlay {
  opacity: 0.5;
}


.drawer__overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 200;
  opacity: 0;
  transition: opacity 0.3s;
  will-change: opacity;
  background-color: #000;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.drawer--left .drawer__wrapper {
  left: 0;
  right: auto;
  -webkit-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0);
}

{% endstylesheet %}

{% javascript %}

var drawer = function () {
    /**
    * Element.closest() polyfill
    * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
    */
    if (!Element.prototype.closest) {
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      }
      Element.prototype.closest = function (s) {
        var el = this;
        var ancestor = this;
        if (!document.documentElement.contains(el)) return null;
        do {
          if (ancestor.matches(s)) return ancestor;
          ancestor = ancestor.parentElement;
        } while (ancestor !== null);
        return null;
      };
    }

    //
    // Settings
    //
    var settings = {
      speedOpen: 50,
      speedClose: 350,
      activeClass: 'is-active',
      visibleClass: 'is-visible',
      selectorTarget: '[data-drawer-target]',
      selectorTrigger: '[data-drawer-trigger]',
      selectorClose: '[data-drawer-close]',
    };

    //
    // Methods
    //
    // Toggle accessibility
    var toggleccessibility = function (event) {
      if (event.getAttribute('aria-expanded') === 'true') {
        event.setAttribute('aria-expanded', false);
      } else {
        event.setAttribute('aria-expanded', true);
      }
    };
    // Open Drawer
    var openDrawer = function (trigger) {
      // Find target
      var target = document.getElementById(trigger.getAttribute('aria-controls'));
      // Make it active
      target.classList.add(settings.activeClass);
      // Make body overflow hidden so it's not scrollable
      document.documentElement.style.overflow = 'hidden';
      // Toggle accessibility
      toggleccessibility(trigger);
      // Make it visible
      setTimeout(function () {
        target.classList.add(settings.visibleClass);
      }, settings.speedOpen);
    };
    // Close Drawer
    var closeDrawer = function (event) {
      // Find target
      var closestParent = event.closest(settings.selectorTarget),
        childrenTrigger = document.querySelector('[aria-controls="' + closestParent.id + '"');
      // Make it not visible
      closestParent.classList.remove(settings.visibleClass);
      // Remove body overflow hidden
      document.documentElement.style.overflow = '';
      // Toggle accessibility
      toggleccessibility(childrenTrigger);
      // Make it not active
      setTimeout(function () {
        closestParent.classList.remove(settings.activeClass);
      }, settings.speedClose);
    };
    // Click Handler
    var clickHandler = function (event) {
      // Find elements
      var toggle = event.target,
        open = toggle.closest(settings.selectorTrigger),
        close = toggle.closest(settings.selectorClose);
      // Open drawer when the open button is clicked
      if (open) {
        openDrawer(open);
      }
      // Close drawer when the close button (or overlay area) is clicked
      if (close) {
        closeDrawer(close);
      }
      // Prevent default link behavior
      if (open || close) {
        event.preventDefault();
      }
    };
    // Keydown Handler, handle Escape button
    var keydownHandler = function (event) {
      if (event.key === 'Escape' || event.keyCode === 27) {
        // Find all possible drawers
        var drawers = document.querySelectorAll(settings.selectorTarget),
          i;
        // Find active drawers and close them when escape is clicked
        for (i = 0; i < drawers.length; ++i) {
          if (drawers[i].classList.contains(settings.activeClass)) {
            closeDrawer(drawers[i]);
          }
        }
      }
    };

    //
    // Inits & Event Listeners
    //
    document.addEventListener('click', clickHandler, false);
    document.addEventListener('keydown', keydownHandler, false);

};
drawer();


{% endjavascript %}
